import groovy.xml.Namespace
import groovy.xml.XmlUtil

import java.text.SimpleDateFormat
import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'maven'

def vn = '1.06.00'
def vc = vn.replace('.', '').toInteger()

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    signingConfigs {
        release {
            keyAlias 'iptv'
            keyPassword '709394'
            storeFile file('./release.keystore')
            storePassword '709394'
        }
    }

    defaultConfig {
        applicationId "linkin.com.apkinfo"
        minSdkVersion 17
        targetSdkVersion 23
        versionCode vc
        versionName vn

    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
        }
    }

    productFlavors {
        domestic {
            manifestPlaceholders = [LINKIN_CHANNEL_VALUE: "domestic"]
        }

        oversea {
            manifestPlaceholders = [LINKIN_CHANNEL_VALUE: "oversea"]
        }
    }

    lintOptions {
        abortOnError false
    }
}

/************************ 搜集项目信息 - 开始 ************************/

// 脚本的版本号
def scriptVersion = '1.00.02'

/**************** 方法定义 - 开始 ****************/

// 包名
def pkgName() {
    return String.valueOf(android.defaultConfig.applicationId)
}

// 版本名
def versionName() {
    return String.valueOf(android.defaultConfig.versionName)
}

// 版本号
def versionCode() {
    return String.valueOf(android.defaultConfig.versionCode)
}

// 最低支持的 Sdk 版本
def minSdk() {
    return String.valueOf(android.defaultConfig.minSdkVersion.mApiLevel)
}

// 当前所处的 Git 分支名称
def gitBranch() {
    return "git rev-parse --abbrev-ref HEAD".execute().text.trim()
}

// 当前打包时对应的 Commit Id
def gitCommitId() {
    if (changesNotCommit()) {
        return null
    } else {
        return "git rev-parse HEAD".execute().text.trim()
    }
}

// 是否为系统应用（是否属于系统用户组）
def isSystemApp() {
    return "android.uid.system".equals(userId())
}

// 获取用户组
def userId() {
    def manifestFile = file(project.projectDir.absolutePath + '/src/main/AndroidManifest.xml')
    // 需要 import groovy.xml.Namespace
    def ns = new Namespace("http://schemas.android.com/apk/res/android", "android")
    def xml = new XmlParser().parse(manifestFile)
    return xml.attributes()[ns.sharedUserId].toString()
}

// 判断是否还有变更没有提交
def changesNotCommit() {
    def output = "git status --porcelain".execute().text.readLines()
    println "commit lines ${output.size()}"
    if (output.isEmpty()) return false
    return !(output.size() == 1 && output.get(0).contains('appinfo.xml'))
}

// 获取渠道号
def channelId() {
    def flavor = null
    def source = gradle.startParameter.taskRequests.first().args.first().toString()
    println "source is ${source}"
    def pattern = Pattern.compile("assemble(.*?)(Release|Debug)");
    def matcher = pattern.matcher(source);
    if (matcher.find()) {
        flavor = matcher.group(1).toLowerCase()
        println "flavor is ${flavor}"
    }
    return flavor
}

/**************** 方法定义 - 结束 ****************/

/**************** 任务定义 - 开始 ****************/

// 搜集项目信息的任务
task createAppInfo << {

    // 创建记录项目基本信息的文件，以供后台系统读取
    def assets = project.projectDir.absolutePath + '/src/main/assets/'
    def apkInfo = assets + "appinfo.xml"

    def directory = new File(assets)
    if (!directory.exists()) {
        directory.mkdirs()
    }

    def file = new File(apkInfo)
    file.createNewFile()

    // 获取最基本的项目信息
    def packageName = pkgName()
    def versionName = versionName()
    def versionCode = versionCode()
    def channelId = channelId()
    def minSdk = minSdk()
    def gitBranch = gitBranch()
    def gitCommitId = gitCommitId()
    def isSystemApp = isSystemApp()

    // 记录上述的基本信息，可自定义 project 的 name，这里默认用项目的名字
    def info = "<project name='${rootProject.name}'>\n" +
            "\t<appinfo_script_version>${scriptVersion}</appinfo_script_version>\n" +
            "\t<package_name>${packageName}</package_name>\n" +
            "\t<version_name>${versionName}</version_name>\n" +
            "\t<version_code>${versionCode}</version_code>\n" +
            "\t<channel_id>${channelId}</channel_id>\n" +
            "\t<min_sdk>${minSdk}</min_sdk>\n" +
            "\t<git_branch>${gitBranch}</git_branch>\n" +
            "\t<git_commit_id>${gitCommitId}</git_commit_id>\n" +
            "\t<system_app>${isSystemApp}</system_app>\n" +
            "\t<dependencies>\n\t</dependencies>\n" +
            "</project>"

    def root = new XmlSlurper().parseText(info)

    // 获取依赖模块的信息
    //noinspection GroovyAssignabilityCheck
    configurations.findAll {
        it.name.equals('compile') || it.name.equals('releaseCompile')
    }.each {
        it.dependencies.all { d ->
            if (null != d.group && null != d.version) {
                root.dependencies.appendNode {
                    //noinspection GroovyAssignabilityCheck
                    dependency(name: d.name) {
                        package_name d.group
                        version_name d.version
                    }
                }
                // import groovy.xml.XmlUtil
                file.write(XmlUtil.serialize(root), 'UTF-8')
            }
        }
    }

}

// 检查是否有混淆的标识文件，没有则创建它
task createProguardMark << {
    def proguardPath = project.projectDir.absolutePath + '/src/main/java/com/linkin/proguard/';
    File dir = new File(proguardPath)
    File mark = new File(proguardPath + 'Mark.java')
    if (!dir.exists()) {
        dir.mkdirs()
    }
    if (!mark.exists()) {
        mark.createNewFile()
        // import java.text.SimpleDateFormat
        def dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        def now = dateFormat.format(new Date())
        def source = "package com.linkin.proguard;\n" +
                "\n" +
                "/**\n" +
                " * 后台判断是否已经混淆的标识类，其中不需要任何的代码或逻辑\n" +
                " * <p/>\n" +
                " * Auto created by build.gradle(${scriptVersion}) on ${now}\n" +
                " */\n" +
                "public class Mark {\n" +
                "}"
        mark.write(source, 'UTF-8')
    }
}

/**************** 任务定义 - 结束 ****************/

// 在信息搜集前，先确定混淆的标志类已经创建
createAppInfo.dependsOn createProguardMark

// 在编译前，首先执行“创建信息文件”的任务
preBuild.dependsOn createAppInfo

/************************ 搜集项目信息 - 结束 ************************/

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.2.0'
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.linkin.tvlayout:tvlayout:1.0.13'
    compile 'com.jakewharton:butterknife:7.0.1'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
    compile project(':common')
}
