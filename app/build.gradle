import groovy.xml.Namespace
import groovy.xml.XmlUtil

apply plugin: 'com.android.application'
apply plugin: 'maven'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    signingConfigs {
        release {
            keyAlias 'iptv'
            keyPassword '709394'
            storeFile file('./release.keystore')
            storePassword '709394'
        }
    }

    defaultConfig {
        applicationId "linkin.com.apkinfo"
        minSdkVersion 17
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
        }
    }

    productFlavors {
        domestic {
        }

        oversea {
        }
    }

    lintOptions {
        abortOnError false
    }
}

/************************ 搜集项目信息 - 开始 ************************/
// 定义该项目的名字（暂时还没有自动获取项目名字，后面会继续改进）
String appName = "ApkInfo"

/**************** 获取项目信息的一些列方法 - 开始 ****************/

// 包名
def pkgName() {
    return String.valueOf(android.defaultConfig.applicationId)
}

// 版本名
def versionName() {
    return String.valueOf(android.defaultConfig.versionName)
}

// 版本号
def versionCode() {
    return String.valueOf(android.defaultConfig.versionCode)
}

// 最低支持的 Sdk 版本
def minSdk() {
    return String.valueOf(android.defaultConfig.minSdkVersion.mApiLevel)
}

// 当前所处的 Git 分支名称
def gitBranch() {
    return "git rev-parse --abbrev-ref HEAD".execute().text.trim()
}

// 当前打包时对应的 Commit Id
def gitCommitId() {
    return "git rev-parse HEAD".execute().text.trim()
}

// 是否为系统应用（是否属于系统用户组）
def isSystemApp() {
    return "android.uid.system".equals(userId())
}

// 获取用户组
def userId() {
    def manifestFile = file(project.projectDir.absolutePath + '/src/main/AndroidManifest.xml')
    def ns = new Namespace("http://schemas.android.com/apk/res/android", "android")
    def xml = new XmlParser().parse(manifestFile)
    return xml.attributes()[ns.sharedUserId].toString()
}
/**************** 获取项目信息的一些列方法 - 结束 ****************/

/**************** 生成项目信息配置文件的任务 - 开始 ****************/
task createAppInfo << {

    // 创建记录项目基本信息的文件，以供后台系统读取
    def assets = project.projectDir.absolutePath + '/src/main/assets/'
    def apkinfo = assets + "appinfo.xml"

    def directory = new File(assets)
    if (!directory.exists()) {
        directory.mkdirs()
    }

    def file = new File(apkinfo)
    file.createNewFile()

    // 获取最基本的项目信息
    def packageName = pkgName()
    def versionName = versionName()
    def versionCode = versionCode()
    def minSdk = minSdk()
    def gitBranch = gitBranch()
    def gitCommitId = gitCommitId()
    def isSystemApp = isSystemApp()

    // 记录上述的基本信息
    def info = "<project name='${appName}'>\n" +
            "\t<package_name>${packageName}</package_name>\n" +
            "\t<version_name>${versionName}</version_name>\n" +
            "\t<version_code>${versionCode}</version_code>\n" +
            "\t<channel_id></channel_id>\n" +
            "\t<min_sdk>${minSdk}</min_sdk>\n" +
            "\t<git_branch>${gitBranch}</git_branch>\n" +
            "\t<git_commit_id>${gitCommitId}</git_commit_id>\n" +
            "\t<system_app>${isSystemApp}</system_app>\n" +
            "\t<dependencies>\n\t</dependencies>\n" +
            "</project>"

    def root = new XmlSlurper().parseText(info)

    // 获取依赖模块的信息
    def channelIdNotSet = true
    android.applicationVariants.all { variant ->
        if (channelIdNotSet) {
            root.channel_id = "${variant.flavorName}_${variant.buildType.name}"
            //noinspection GroovyAssignabilityCheck
            configurations.findAll {
                //noinspection GroovyAssignabilityCheck
                it.name.equals("compile") || it.name.contains("${variant.buildType.name}Compile")
            }.each {
                it.dependencies.all { d ->
                    if (null != d.group && null != d.version) {
                        root.dependencies.appendNode {
                            //noinspection GroovyAssignabilityCheck
                            dependency(name: d.name) {
                                package_name d.group
                                version_name d.version
                            }
                        }
                        file.write(XmlUtil.serialize(root))
                    }
                }
            }
        }
        channelIdNotSet = false
    }

}
/**************** 生成项目信息配置文件的任务 - 结束 ****************/

// 在编译前，首先执行“创建信息文件”的任务
preBuild.dependsOn createAppInfo

/************************ 搜集项目信息 - 结束 ************************/

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.2.0'
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.linkin.tvlayout:tvlayout:1.0.13'
    compile 'com.linkin.base:base:1.0.91'
    compile 'com.jakewharton:butterknife:7.0.1'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
}
